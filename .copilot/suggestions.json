{
  "suggestions": [
    {
      "file": "(staged)",
      "text": "diff --git a/.copilot/proof.json b/.copilot/proof.json\nnew file mode 100644\nindex 0000000..64a2607\n--- /dev/null\n+++ b/.copilot/proof.json\n@@ -0,0 +1,15 @@\n+{\n+  \"timestamp\": \"2025-10-18T14:04:21.721Z\",\n+  \"baseRef\": \"HEAD~1\",\n+  \"headRef\": \"HEAD\",\n+  \"diffHash\": \"8a77066e2e40ed1f79842b0c4db8ddd945eb0601bfc9c3eeb01dc16c9d5dd9b6\",\n+  \"overlapScore\": 0,\n+  \"minScore\": 0.35,\n+  \"conforms\": false,\n+  \"details\": [],\n+  \"metadata\": {\n+    \"totalChunks\": 9,\n+    \"totalSuggestions\": 0,\n+    \"validComparisons\": 0\n+  }\n+}\n\\ No newline at end of file\ndiff --git a/.copilot/suggestions.json b/.copilot/suggestions.json\nindex f3fc7f5..0a3fe66 100644\n--- a/.copilot/suggestions.json\n+++ b/.copilot/suggestions.json\n@@ -1 +1,3 @@\n-{ \"suggestions\": [] }\n+{\n+  \"suggestions\": []\n+}\n\\ No newline at end of file\ndiff --git a/.github/workflows/reusable-copilot-verify.yml b/.github/workflows/reusable-copilot-verify.yml\nindex b2b5f67..7d317e5 100644\n--- a/.github/workflows/reusable-copilot-verify.yml\n+++ b/.github/workflows/reusable-copilot-verify.yml\n@@ -5,3 +5,12 @@ on:\n-      min_score:  { type: string, required: false, default: \"0.35\" }\n-      fail_on_low:{ type: string, required: false, default: \"false\" } # \"true\" to fail job if below min_score\n-      post_comment: { type: string, required: false, default: \"true\" } # \"true\" to post PR comment\n+      min_score:\n+        type: string\n+        required: false\n+        default: \"0.35\"\n+      fail_on_low:\n+        type: string\n+        required: false\n+        default: \"false\" # \"true\" to fail job if below min_score\n+      post_comment:\n+        type: string\n+        required: false\n+        default: \"true\" # \"true\" to post PR comment\n@@ -61,17 +70 @@ jobs:\n-            const comment = `## ${emoji} Copilot Verification Results\n-            \n-**Status:** ${status}  \n-**Overlap Score:** ${score}% (threshold: ${(proof.minScore * 100).toFixed(1)}%)  \n-**Proof:** [Download artifact](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n-\n-<details>\n-<summary>ðŸ“Š Detailed Results</summary>\n-\n-- **Files Changed:** ${proof.metadata?.totalChunks || 0}\n-- **Suggestions Analyzed:** ${proof.metadata?.totalSuggestions || 0}\n-- **Valid Comparisons:** ${proof.metadata?.validComparisons || 0}\n-\n-${proof.details?.length > 0 ? '**Per-file scores:**\\n' + proof.details.map((d, i) => `- \\`${d.file}\\`: ${(d.score * 100).toFixed(1)}%`).join('\\n') : ''}\n-</details>\n-\n-*This verification compares your code changes against Copilot suggestions to ensure alignment with AI-assisted development practices.*`;\n+            const comment = `## ${emoji} Copilot Verification Results\\n\\n**Status:** ${status}\\n**Overlap Score:** ${score}% (threshold: ${(proof.minScore * 100).toFixed(1)}%)\\n**Proof:** [Download artifact](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\\n\\n<details>\\n<summary>ðŸ“Š Detailed Results</summary>\\n\\n- **Files Changed:** ${proof.metadata?.totalChunks || 0}\\n- **Suggestions Analyzed:** ${proof.metadata?.totalSuggestions || 0}\\n- **Valid Comparisons:** ${proof.metadata?.validComparisons || 0}\\n\\n${proof.details?.length > 0 ? '**Per-file scores:**\\\\n' + proof.details.map((d, i) => `- \\\\`${d.file}\\\\`: ${(d.score * 100).toFixed(1)}%`).join('\\\\n') : ''}\\n</details>\\n\\n*This verification compares your code changes against Copilot suggestions to ensure alignment with AI-assisted development practices.*`;\ndiff --git a/package-lock.json b/package-lock.json\nindex 7876fb0..bf625bf 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -11 +11,2 @@\n-        \"tweetnacl\": \"^1.0.3\"\n+        \"tweetnacl\": \"^1.0.3\",\n+        \"yaml\": \"^2.8.1\"\n@@ -40,0 +42,12 @@\n+    },\n+    \"node_modules/yaml\": {\n+      \"version\": \"2.8.1\",\n+      \"resolved\": \"https://registry.npmjs.org/yaml/-/yaml-2.8.1.tgz\",\n+      \"integrity\": \"sha512-lcYcMxX2PO9XMGvAJkJ3OsNMw+/7FKes7/hgerGUYWIoWu5j/+YQqcZr5JnPZWzOsEBgMbSbiSTn/dv/69Mkpw==\",\n+      \"license\": \"ISC\",\n+      \"bin\": {\n+        \"yaml\": \"bin.mjs\"\n+      },\n+      \"engines\": {\n+        \"node\": \">= 14.6\"\n+      }\ndiff --git a/package.json b/package.json\nindex f992bcf..ba02ca4 100644\n--- a/package.json\n+++ b/package.json\n@@ -9 +9,2 @@\n-    \"tweetnacl\": \"^1.0.3\"\n+    \"tweetnacl\": \"^1.0.3\",\n+    \"yaml\": \"^2.8.1\"\ndiff --git a/scripts/captureCopilotSuggestions.mjs b/scripts/captureCopilotSuggestions.mjs\nindex 0f9c178..84fdcd2 100755\n--- a/scripts/captureCopilotSuggestions.mjs\n+++ b/scripts/captureCopilotSuggestions.mjs\n@@ -9,0 +10 @@ import { execSync } from \"child_process\";\n+import path from \"path\";\n@@ -12 +13 @@ function sh(cmd){ try { return execSync(cmd, {stdio:[\"ignore\",\"pipe\",\"ignore\"]})\n-function writeJSON(p, obj){ fs.mkdirSync(require(\"path\").dirname(p), { recursive: true }); fs.writeFileSync(p, JSON.stringify(obj, null, 2)); }\n+function writeJSON(p, obj){ fs.mkdirSync(path.dirname(p), { recursive: true }); fs.writeFileSync(p, JSON.stringify(obj, null, 2)); }\n"
    }
  ]
}