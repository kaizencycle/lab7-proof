export type LessonPlan = {
  title: string;
  objectives?: string[];
  sections?: { title: string; summary?: string; content?: string; quick_checks?: string[] }[];
  practice?: { prompt: string }[];
  takeaways?: string[];
};

function mdEscape(s = ""): string {
  return s.replace(/</g, "&lt;").replace(/>/g, "&gt;");
}

export function lessonToMarkdown(plan: LessonPlan): string {
  const lines: string[] = [];
  const title = plan.title || "Lesson";
  lines.push(`# ${mdEscape(title)}`);
  lines.push("");

  if (plan.objectives?.length) {
    lines.push("## Objectives");
    for (const o of plan.objectives) lines.push(`- ${mdEscape(o)}`);
    lines.push("");
  }

  if (plan.sections?.length) {
    lines.push("## Sections");
    lines.push("");
    plan.sections.forEach((s, i) => {
      lines.push(`### ${i + 1}. ${mdEscape(s.title || "Section")}`);
      if (s.summary) { lines.push(""); lines.push(mdEscape(s.summary)); lines.push(""); }
      if (s.content) { lines.push("```"); lines.push(s.content.trim()); lines.push("```"); lines.push(""); }
      if (s.quick_checks?.length) {
        lines.push("**Quick checks**");
        for (const q of s.quick_checks) lines.push(`- ${mdEscape(q)}`);
        lines.push("");
      }
    });
  }

  if (plan.practice?.length) {
    lines.push("## Practice");
    for (const p of plan.practice) lines.push(`- ${mdEscape(p.prompt)}`);
    lines.push("");
  }

  if (plan.takeaways?.length) {
    lines.push("## Key Takeaways");
    for (const t of plan.takeaways) lines.push(`- ${mdEscape(t)}`);
    lines.push("");
  }

  lines.push("---");
  lines.push("_Generated by OAA Lesson Planner_");
  return lines.join("\n");
}

export function downloadMarkdown(filename: string, markdown: string) {
  const blob = new Blob([markdown], { type: "text/markdown;charset=utf-8" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = filename;
  document.body.appendChild(a);
  a.click();
  a.remove();
  URL.revokeObjectURL(url);
}