"use client";
import { useMemo, useRef, useState } from "react";
import { bookletToMarkdown, downloadText, Booklet, LessonPlan } from "../../lib/booklet";
import { lessonToPDF } from "../../lib/pdf";

export default function BookletPage() {
  const [title, setTitle] = useState("OAA STEM Booklet");
  const [subtitle, setSubtitle] = useState("Micro-lessons for fast learning");
  const [lessons, setLessons] = useState<LessonPlan[]>([]);
  const [toast, setToast] = useState<string | null>(null);
  const previewRef = useRef<HTMLDivElement>(null);

  const booklet: Booklet = useMemo(() => ({ title, subtitle, lessons }), [title, subtitle, lessons]);

  function addFromJSON() {
    const raw = prompt("Paste lesson JSON (plan object):");
    if (!raw) return;
    try {
      const parsed = JSON.parse(raw);
      setLessons((l) => [...l, parsed]);
    } catch {
      setToast("Invalid JSON");
      setTimeout(() => setToast(null), 2000);
    }
  }

  function addFromMarkdownFile() {
    const input = document.createElement("input");
    input.type = "file";
    input.accept = ".md,.markdown,text/markdown";
    input.onchange = async () => {
      const file = input.files?.[0];
      if (!file) return;
      const text = await file.text();
      // naive parse: title = first # heading; treat rest as single-section content
      const first = (text.match(/^#\s+(.+)$/m) || [])[1] || file.name.replace(/\.(md|markdown)$/i, "");
      const plan: LessonPlan = {
        title: first.trim(),
        objectives: [],
        sections: [{ title: "Content", summary: "", content: text }]
      };
      setLessons((l) => [...l, plan]);
    };
    input.click();
  }

  function removeAt(idx: number) {
    setLessons((l) => l.filter((_, i) => i !== idx));
  }
  function move(idx: number, dir: -1 | 1) {
    setLessons((l) => {
      const n = [...l];
      const j = idx + dir;
      if (j < 0 || j >= n.length) return n;
      [n[idx], n[j]] = [n[j], n[idx]];
      return n;
    });
  }
  function rename(idx: number) {
    const t = prompt("Rename lesson", lessons[idx]?.title || "");
    if (!t) return;
    setLessons((l) => l.map((x, i) => (i === idx ? { ...x, title: t } : x)));
  }

  function exportMarkdown() {
    const md = bookletToMarkdown(booklet);
    const safe = (title || "oaa-booklet").toLowerCase().replace(/[^a-z0-9\-]+/g, "-");
    downloadText(`${safe}.md`, md);
  }

  async function exportPDF() {
    if (!previewRef.current) {
      setToast("Render preview first (auto), then export.");
      setTimeout(() => setToast(null), 2000);
      return;
    }
    // snapshot the preview container into a single PDF
    await lessonToPDF(previewRef.current, title || "OAA Booklet");
  }

  return (
    <div style={wrap}>
      <aside style={left}>
        <div style={h1}>Booklet Builder</div>
        <label style={lab}>Title</label>
        <input style={inp} value={title} onChange={(e) => setTitle(e.target.value)} />
        <label style={lab}>Subtitle</label>
        <input style={inp} value={subtitle} onChange={(e) => setSubtitle(e.target.value)} />
        <div style={sep} />
        <div style={row}>
          <button style={btn} onClick={addFromJSON}>+ Add from JSON</button>
          <button style={btn} onClick={addFromMarkdownFile}>+ Import .md</button>
        </div>
        <div style={{ marginTop: 8, fontWeight: 700, opacity: 0.9 }}>Lessons ({lessons.length})</div>
        <div style={{ display: "grid", gap: 6 }}>
          {lessons.map((l, i) => (
            <div key={i} style={card}>
              <div style={{ fontWeight: 600 }}>{l.title || `Lesson ${i + 1}`}</div>
              <div style={{ display: "flex", gap: 6 }}>
                <button style={tiny} onClick={() => move(i, -1)}>â†‘</button>
                <button style={tiny} onClick={() => move(i, 1)}>â†“</button>
                <button style={tiny} onClick={() => rename(i)}>âœŽ</button>
                <button style={tiny} onClick={() => removeAt(i)}>ðŸ—‘</button>
              </div>
            </div>
          ))}
        </div>
        <div style={sep} />
        <div style={row}>
          <button style={ghost} onClick={exportMarkdown} disabled={!lessons.length}>Export .md</button>
          <button style={primary} onClick={exportPDF} disabled={!lessons.length}>Export PDF</button>
        </div>
      </aside>
      <main style={right}>
        <div ref={previewRef} style={preview}>
          <div style={cover}>
            <div style={{ fontSize: 28, fontWeight: 800 }}>{title}</div>
            {subtitle && <div style={{ opacity: 0.8, marginTop: 6 }}>{subtitle}</div>}
            <div style={{ opacity: 0.6, marginTop: 10, fontSize: 12 }}>Generated by OAA â€” {new Date().toLocaleDateString()}</div>
          </div>
          <div style={tocWrap}>
            <div style={{ fontWeight: 800, marginBottom: 6 }}>Table of Contents</div>
            <ol style={{ margin: 0, paddingLeft: 18 }}>
              {lessons.map((l, i) => <li key={i}>{l.title || `Lesson ${i + 1}`}</li>)}
            </ol>
          </div>
          <div style={{ height: 12 }} />
          {lessons.map((l, i) => (
            <section key={i} style={lessonBox}>
              <div style={{ fontWeight: 800, fontSize: 18, marginBottom: 6 }}>{i + 1}. {l.title || "Lesson"}</div>
              {!!(l.objectives?.length) && (
                <div style={{ marginBottom: 6 }}>
                  <div style={{ fontWeight: 700 }}>Objectives</div>
                  <ul style={{ margin: 0, paddingLeft: 18 }}>
                    {l.objectives!.map((o, j) => <li key={j}>{o}</li>)}
                  </ul>
                </div>
              )}
              {(l.sections || []).map((s, j) => (
                <div key={j} style={{ marginBottom: 8 }}>
                  <div style={{ fontWeight: 700, marginTop: 6 }}>{i + 1}.{j + 1} {s.title || "Section"}</div>
                  {s.summary && <p style={{ margin: "4px 0" }}>{s.summary}</p>}
                  {s.content && <pre style={pre}>{s.content}</pre>}
                  {!!(s.quick_checks?.length) && (
                    <div>
                      <div style={{ fontWeight: 700 }}>Quick checks</div>
                      <ul style={{ margin: 0, paddingLeft: 18 }}>
                        {s.quick_checks!.map((q, qx) => <li key={qx}>{q}</li>)}
                      </ul>
                    </div>
                  )}
                </div>
              ))}
              {!!(l.practice?.length) && (
                <div style={{ marginTop: 6 }}>
                  <div style={{ fontWeight: 700 }}>Practice</div>
                  <ul style={{ margin: 0, paddingLeft: 18 }}>
                    {l.practice!.map((p, px) => <li key={px}>{p.prompt}</li>)}
                  </ul>
                </div>
              )}
              {!!(l.takeaways?.length) && (
                <div style={{ marginTop: 6 }}>
                  <div style={{ fontWeight: 700 }}>Key Takeaways</div>
                  <ul style={{ margin: 0, paddingLeft: 18 }}>
                    {l.takeaways!.map((t, tx) => <li key={tx}>{t}</li>)}
                  </ul>
                </div>
              )}
            </section>
          ))}
        </div>
      </main>
      {toast && <div style={toastBox}>{toast}</div>}
    </div>
  );
}

/* styles */
const wrap: React.CSSProperties = { display: "grid", gridTemplateColumns: "360px 1fr", height: "100vh", background: "#0f172a" };
const left: React.CSSProperties = { background: "#0b1225", color: "white", padding: 16, borderRight: "1px solid #1e293b", overflow: "auto" };
const right: React.CSSProperties = { background: "white", color: "#0f172a", overflow: "auto" };
const h1: React.CSSProperties = { fontWeight: 800, fontSize: 18, marginBottom: 8 };
const lab: React.CSSProperties = { fontSize: 12, opacity: 0.8, marginTop: 8 };
const inp: React.CSSProperties = { border: "1px solid #334155", background: "#0f172a", color: "white", borderRadius: 8, padding: "8px 10px" };
const row: React.CSSProperties = { display: "flex", gap: 8, alignItems: "center", margin: "8px 0" };
const sep: React.CSSProperties = { height: 1, background: "#1e293b", margin: "12px 0" };
const btn: React.CSSProperties = { border: "1px solid #334155", background: "#1e293b", color: "white", borderRadius: 8, fontWeight: 700, cursor: "pointer", padding: "6px 8px" };
const tiny: React.CSSProperties = { border: "1px solid #334155", background: "transparent", color: "white", borderRadius: 6, cursor: "pointer", padding: "2px 6px" };
const card: React.CSSProperties = { display: "flex", alignItems: "center", justifyContent: "space-between", border: "1px solid #334155", borderRadius: 8, padding: "8px 10px" };
const ghost: React.CSSProperties = { border: "1px solid #d1d5db", background: "white", color: "#0f172a", borderRadius: 10, fontWeight: 700, cursor: "pointer", padding: "6px 10px" };
const primary: React.CSSProperties = { border: "1px solid #111827", background: "#111827", color: "white", borderRadius: 10, fontWeight: 700, cursor: "pointer", padding: "6px 10px" };
const preview: React.CSSProperties = { background: "white", color: "#0f172a", margin: 16, padding: 16, border: "1px solid #e5e7eb", borderRadius: 10 };
const cover: React.CSSProperties = { textAlign: "center", padding: "28px 10px", borderBottom: "1px solid #e5e7eb" };
const tocWrap: React.CSSProperties = { padding: "14px 0", borderBottom: "1px solid #e5e7eb" };
const lessonBox: React.CSSProperties = { padding: "12px 0", borderBottom: "1px solid #f1f5f9" };
const pre: React.CSSProperties = { whiteSpace: "pre-wrap", margin: 0, fontFamily: "Inter, system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, sans-serif", fontSize: 14, background: "#f8fafc", padding: 8, border: "1px solid #e5e7eb", borderRadius: 8 };
const toastBox: React.CSSProperties = { position: "fixed", right: 16, bottom: 16, background: "#111827", color: "white", borderRadius: 10, padding: "10px 12px", border: "1px solid #1f2937", boxShadow: "0 6px 20px rgba(0,0,0,0.25)" };