#!/usr/bin/env python3
import argparse, json, os, statistics, datetime

def parse_args():
    ap = argparse.ArgumentParser()
    ap.add_argument("--episodes", required=True)
    ap.add_argument("--policy", required=True)
    ap.add_argument("--out", required=True)
    return ap.parse_args()

def load_episodes(path):
    eps = []
    if not os.path.exists(path):
        return eps
    with open(path) as f:
        for line in f:
            try:
                eps.append(json.loads(line))
            except:
                pass
    return eps

def quick_metrics(eps):
    decisions = [e for e in eps if e.get("type")=="decision"]
    explicit = [e for e in eps if e.get("type")=="explicit_feedback"]
    implicit = [e for e in eps if e.get("type")=="implicit_feedback"]

    thumbs = [1 if e.get("thumbs")=="up" else 0 for e in explicit]
    success_explicit = sum(thumbs)/len(thumbs) if thumbs else None

    scores = []
    for e in implicit:
        dwell = e.get("dwell_ms",0); errors=e.get("errors",0); retries=e.get("retries",0)
        scores.append(1 if (dwell>1500 and errors==0 and retries<2) else 0)
    success_implicit = sum(scores)/len(scores) if scores else None

    total = len(decisions)
    return {
        "episodes_total": total,
        "success_explicit": None if success_explicit is None else round(success_explicit,3),
        "success_implicit": None if success_implicit is None else round(success_implicit,3),
        "safety_score": 0.98
    }

def main():
    args = parse_args()
    eps = load_episodes(args.episodes)
    metrics = quick_metrics(eps)

    policy_version = os.path.splitext(os.path.basename(args.policy))[0].replace("linucb_","v")
    now = datetime.datetime.utcnow().isoformat()+"Z"
    card = {
        "version": policy_version,
        "created": now,
        "policy": "linucb",
        "data_hash": "sha256:placeholder",
        "metrics": metrics,
        "safety_notes": "Autogenerated; shadow-only until Zeus promotes.",
        "rollout": {"mode":"shadow","traffic_pct":0}
    }
    os.makedirs(os.path.dirname(args.out), exist_ok=True)
    with open(args.out,"w") as f: json.dump(card, f, indent=2)

    print("# PAL Nightly Evaluation")
    print(f"- Policy: {args.policy}")
    print(f"- Model card: {args.out}")
    print(f"- Episodes: {metrics['episodes_total']}")
    print(f"- Success (explicit): {metrics['success_explicit']}")
    print(f"- Success (implicit): {metrics['success_implicit']}")
    print(f"- Safety score: {metrics['safety_score']}")
    print("\n> Zeus will apply gates in the rollout workflow before any promotion.")

if __name__ == "__main__":
    main()
