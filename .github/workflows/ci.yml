name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Lint • Type • Test (py311)
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping || exit 1"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 10

    env:
      # Wire Redis nonce defense to the service container
      OAA_NONCE_REDIS_URL: redis://localhost:6379/0
      OAA_NONCE_TTL_SEC: 600

      # Verification policy in CI (kept strict)
      OAA_VERIFY_PIN_KEYS: "true"
      OAA_VERIFY_TS_WINDOW_MIN: "10"
      OAA_VERIFY_NONCE_TTL_SEC: "600"
      OAA_VERIFY_REQUIRE_NONCE: "false"

      # Issuer and (generated) keys will be filled below
      OAA_ISSUER: oaa.lab7.ci

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements*.txt', 'pyproject.toml') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Dev tools for CI
          pip install black ruff mypy pytest detect-secrets

      - name: Generate Ed25519 keypair for CI (env only)
        run: |
          python - << 'PY'
          from nacl import signing
          import base64, os
          sk = signing.SigningKey.generate()
          pub = sk.verify_key
          print(f"OAA_ED25519_PRIVATE_B64={base64.b64encode(sk.encode()).decode()}")
          print(f"OAA_ED25519_PUBLIC_B64={base64.b64encode(pub.encode()).decode()}")
          PY
        shell: bash >> $GITHUB_ENV

      - name: Detect secrets against baseline
        run: |
          if [ -f .secrets.baseline ]; then
            detect-secrets scan --baseline .secrets.baseline --exclude-files 'data/|attestations/' --fail-on-allowlist
          else
            echo "No .secrets.baseline found; skipping (recommended to add one)."
          fi

      - name: Black (check)
        run: black --check .

      - name: Ruff (lint + fix)
        run: ruff check .

      - name: Mypy (type check)
        run: mypy app

      - name: Pytest (quick)
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: pytest -q
