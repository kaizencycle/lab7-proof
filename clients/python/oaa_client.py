# Autogenerated-ish client for Lab7 OAA v0.1.0
from __future__ import annotations
from dataclasses import dataclass
from typing import Dict, Optional, List, Literal, Any
import httpx

MentorName = Literal["gemini", "claude", "deepseek", "perplexity"]

@dataclass
class StartSessionRequest:
    user_id: str
    mentors: Optional[List[MentorName]] = None

@dataclass
class StartSessionResponse:
    session_id: str
    mentors: List[MentorName]
    started_at: str

@dataclass
class TurnRequest:
    session_id: str
    prompt: str
    tools: Optional[List[MentorName]] = None

@dataclass
class TurnResponse:
    session_id: str
    drafts: Dict[str, str]
    meta: Optional[Dict[str, Any]] = None

@dataclass
class SubmitRequest:
    session_id: str
    user_id: str
    prompt: str
    answer: str

@dataclass
class RubricScores:
    accuracy: int
    depth: int
    originality: int
    integrity: int

@dataclass
class SubmitResponse:
    attestation_id: str
    xp_awarded: int
    level_before: int
    level_after: int
    reward_tx_id: Optional[str] = None
    balance_after: Optional[float] = None

@dataclass
class CritiqueRequest:
    session_id: str
    prompt: str
    answer: str

@dataclass
class CritiqueResponse:
    rubric: RubricScores
    critique: str

class ApiError(Exception):
    def __init__(self, code: str, message: str, details: Any = None):
        super().__init__(f"{code}: {message}")
        self.code = code
        self.message = message
        self.details = details

class OAAClient:
    def __init__(self, base_url: str = "http://localhost:8080", headers: Optional[Dict[str, str]] = None, timeout: float = 15.0):
        self.base_url = base_url.rstrip("/")
        self.headers = {"content-type": "application/json", **(headers or {})}
        self.timeout = timeout

    def _url(self, path: str) -> str:
        return f"{self.base_url}{path}"

    def _handle_error(self, r: httpx.Response):
        try:
            data = r.json()
            raise ApiError(str(data.get("code", r.status_code)), data.get("message", r.text), data.get("details"))
        except Exception:
            raise ApiError(str(r.status_code), r.text)

    def start_session(self, body: StartSessionRequest) -> StartSessionResponse:
        with httpx.Client(timeout=self.timeout) as c:
            r = c.post(self._url("/v1/session/start"), json=body.__dict__, headers=self.headers)
        if r.status_code >= 400: self._handle_error(r)
        return StartSessionResponse(**r.json())

    def turn(self, body: TurnRequest) -> TurnResponse:
        with httpx.Client(timeout=self.timeout) as c:
            r = c.post(self._url("/v1/session/turn"), json=body.__dict__, headers=self.headers)
        if r.status_code >= 400: self._handle_error(r)
        return TurnResponse(**r.json())

    def submit(self, body: SubmitRequest) -> SubmitResponse:
        with httpx.Client(timeout=self.timeout) as c:
            r = c.post(self._url("/v1/session/submit"), json=body.__dict__, headers=self.headers)
        if r.status_code >= 400: self._handle_error(r)
        return SubmitResponse(**r.json())

    def critique(self, body: CritiqueRequest) -> CritiqueResponse:
        with httpx.Client(timeout=self.timeout) as c:
            r = c.post(self._url("/v1/session/critique"), json=body.__dict__, headers=self.headers)
        if r.status_code >= 400: self._handle_error(r)
        data = r.json()
        return CritiqueResponse(rubric=RubricScores(**data["rubric"]), critique=data["critique"])

class AsyncOAAClient:
    def __init__(self, base_url: str = "http://localhost:8080", headers: Optional[Dict[str, str]] = None, timeout: float = 15.0):
        self.base_url = base_url.rstrip("/")
        self.headers = {"content-type": "application/json", **(headers or {})}
        self.timeout = timeout

    def _url(self, path: str) -> str:
        return f"{self.base_url}{path}"

    async def _handle_error(self, r: httpx.Response):
        try:
            data = r.json()
            raise ApiError(str(data.get("code", r.status_code)), data.get("message", await r.aread()), data.get("details"))
        except Exception:
            raise ApiError(str(r.status_code), await r.aread())

    async def start_session(self, body: StartSessionRequest) -> StartSessionResponse:
        async with httpx.AsyncClient(timeout=self.timeout) as c:
            r = await c.post(self._url("/v1/session/start"), json=body.__dict__, headers=self.headers)
        if r.status_code >= 400: await self._handle_error(r)
        return StartSessionResponse(**r.json())

    async def turn(self, body: TurnRequest) -> TurnResponse:
        async with httpx.AsyncClient(timeout=self.timeout) as c:
            r = await c.post(self._url("/v1/session/turn"), json=body.__dict__, headers=self.headers)
        if r.status_code >= 400: await self._handle_error(r)
        return TurnResponse(**r.json())

    async def submit(self, body: SubmitRequest) -> SubmitResponse:
        async with httpx.AsyncClient(timeout=self.timeout) as c:
            r = await c.post(self._url("/v1/session/submit"), json=body.__dict__, headers=self.headers)
        if r.status_code >= 400: await self._handle_error(r)
        return SubmitResponse(**r.json())

    async def critique(self, body: CritiqueRequest) -> CritiqueResponse:
        async with httpx.AsyncClient(timeout=self.timeout) as c:
            r = await c.post(self._url("/v1/session/critique"), json=body.__dict__, headers=self.headers)
        if r.status_code >= 400: await self._handle_error(r)
        data = r.json()
        return CritiqueResponse(rubric=RubricScores(**data["rubric"]), critique=data["critique"])
